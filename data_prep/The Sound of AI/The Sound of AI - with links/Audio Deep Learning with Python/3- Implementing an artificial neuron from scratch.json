[
    {
        "id": "93792d70",
        "text": "Hi, everybody and welcome to another video in the Deep Learning for Rodeo with Python series. This time around, we're gonna talk about artificial neurons and we're gonna both understand the theory behind it and also implement them in Python. So a little bit more of a focus on what we'll be learning. So we'll have a quick look at a biological neurons. Obviously, it's not gonna be a neuro class by any means, it's just gonna be like some very introductory uh things about biological neurons. And then we're gonna move on to artificial neurons and see a little bit how the math works behind it and understanding the uh the theory there and then we'll move on and we're gonna basically implement an artificial neuron from scratch in Python. So let's get started. Uh the picture you have here is that of a biological neuron. So as you see, this is a quite complex system with a bunch of like different things, but we are mainly interested in three aspects of it. The dendrites, which are all of these filaments like down here. And basically these are",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=7s",
        "start_time": "7.78"
    },
    {
        "id": "f05d8776",
        "text": "class by any means, it's just gonna be like some very introductory uh things about biological neurons. And then we're gonna move on to artificial neurons and see a little bit how the math works behind it and understanding the uh the theory there and then we'll move on and we're gonna basically implement an artificial neuron from scratch in Python. So let's get started. Uh the picture you have here is that of a biological neuron. So as you see, this is a quite complex system with a bunch of like different things, but we are mainly interested in three aspects of it. The dendrites, which are all of these filaments like down here. And basically these are input modules which are important for the neuron because they get uh signals from other neurons and they input it to the cell body, which is the operational center of the neuron. And, and basically the cell body does",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=33s",
        "start_time": "33.625"
    },
    {
        "id": "9ad952d9",
        "text": "Uh the picture you have here is that of a biological neuron. So as you see, this is a quite complex system with a bunch of like different things, but we are mainly interested in three aspects of it. The dendrites, which are all of these filaments like down here. And basically these are input modules which are important for the neuron because they get uh signals from other neurons and they input it to the cell body, which is the operational center of the neuron. And, and basically the cell body does some kind of computation on this signal which is electric signal, it modulates it and then it passes it on along the Axion to all of these different synaptic terminals down here which are connected to other neurons. So through synapses and through the Axion terminals, basically,",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=60s",
        "start_time": "60.47"
    },
    {
        "id": "7b866d51",
        "text": "input modules which are important for the neuron because they get uh signals from other neurons and they input it to the cell body, which is the operational center of the neuron. And, and basically the cell body does some kind of computation on this signal which is electric signal, it modulates it and then it passes it on along the Axion to all of these different synaptic terminals down here which are connected to other neurons. So through synapses and through the Axion terminals, basically, um what the neuron does is connect, being connected to all other neurons in this sense, the neuron can be seen as an individual that stays within a very complex system within a network where you have loads and loads of neurons connected together.",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=82s",
        "start_time": "82.779"
    },
    {
        "id": "404e8db6",
        "text": "some kind of computation on this signal which is electric signal, it modulates it and then it passes it on along the Axion to all of these different synaptic terminals down here which are connected to other neurons. So through synapses and through the Axion terminals, basically, um what the neuron does is connect, being connected to all other neurons in this sense, the neuron can be seen as an individual that stays within a very complex system within a network where you have loads and loads of neurons connected together. Now, if you take a neuron by itself, that isn't, it's obviously remarkable, but it's not super powerful, it becomes super powerful when",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=105s",
        "start_time": "105.089"
    },
    {
        "id": "0dd3627c",
        "text": "um what the neuron does is connect, being connected to all other neurons in this sense, the neuron can be seen as an individual that stays within a very complex system within a network where you have loads and loads of neurons connected together. Now, if you take a neuron by itself, that isn't, it's obviously remarkable, but it's not super powerful, it becomes super powerful when you put together billions of neurons. And the result that you have is basically the brain there and the power of the brain doesn't reside in the structure of the neurons themselves. But rather in the incredible number of connections we have among all of our neurons",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=127s",
        "start_time": "127.639"
    },
    {
        "id": "8143f710",
        "text": "Now, if you take a neuron by itself, that isn't, it's obviously remarkable, but it's not super powerful, it becomes super powerful when you put together billions of neurons. And the result that you have is basically the brain there and the power of the brain doesn't reside in the structure of the neurons themselves. But rather in the incredible number of connections we have among all of our neurons in our brains. And thanks like to, to these neurons and these connections. And we are talking here about trillions of connections of billions and billions of neurons. We can walk, we can play the piano and we can solve Sudoku and play chess, for example, right.",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=146s",
        "start_time": "146.869"
    },
    {
        "id": "b1a0d0cc",
        "text": "you put together billions of neurons. And the result that you have is basically the brain there and the power of the brain doesn't reside in the structure of the neurons themselves. But rather in the incredible number of connections we have among all of our neurons in our brains. And thanks like to, to these neurons and these connections. And we are talking here about trillions of connections of billions and billions of neurons. We can walk, we can play the piano and we can solve Sudoku and play chess, for example, right. So now let's move on to the artificial neuron. And basically the the the story goes that we looked at the uh neuron at the biological neuron and we use a ve a very simplified version of it",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=158s",
        "start_time": "158.699"
    },
    {
        "id": "9049c6fc",
        "text": "in our brains. And thanks like to, to these neurons and these connections. And we are talking here about trillions of connections of billions and billions of neurons. We can walk, we can play the piano and we can solve Sudoku and play chess, for example, right. So now let's move on to the artificial neuron. And basically the the the story goes that we looked at the uh neuron at the biological neuron and we use a ve a very simplified version of it to create artificial neurons. And in artificial neurons here, as you can see, you have a series of inputs. So it is X one, X two, X three with certain weights associated to this different inputs like W 1 W-2 W three. And",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=177s",
        "start_time": "177.755"
    },
    {
        "id": "7e0092ba",
        "text": "So now let's move on to the artificial neuron. And basically the the the story goes that we looked at the uh neuron at the biological neuron and we use a ve a very simplified version of it to create artificial neurons. And in artificial neurons here, as you can see, you have a series of inputs. So it is X one, X two, X three with certain weights associated to this different inputs like W 1 W-2 W three. And as you can imagine here, uh this is the equivalent of the dendrites that we have in the biological neuron. Then we have the neuron itself uh which does a couple of things. It does uh computation in the form of a sum and an activation.",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=197s",
        "start_time": "197.74"
    },
    {
        "id": "8eeaf937",
        "text": "to create artificial neurons. And in artificial neurons here, as you can see, you have a series of inputs. So it is X one, X two, X three with certain weights associated to this different inputs like W 1 W-2 W three. And as you can imagine here, uh this is the equivalent of the dendrites that we have in the biological neuron. Then we have the neuron itself uh which does a couple of things. It does uh computation in the form of a sum and an activation. And this part of the neuron in a sense can be equated to the, to the cell body. And finally, you have like the output of the neuron,",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=215s",
        "start_time": "215.304"
    },
    {
        "id": "733f533e",
        "text": "as you can imagine here, uh this is the equivalent of the dendrites that we have in the biological neuron. Then we have the neuron itself uh which does a couple of things. It does uh computation in the form of a sum and an activation. And this part of the neuron in a sense can be equated to the, to the cell body. And finally, you have like the output of the neuron, right. So as I just said, so the neuron does a couple of computation, one is called the sum or the nets input and the other one, it's the activation. So let's take a look at the sum first. So here we have H which stands for the",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=233s",
        "start_time": "233.179"
    },
    {
        "id": "cc722d5f",
        "text": "And this part of the neuron in a sense can be equated to the, to the cell body. And finally, you have like the output of the neuron, right. So as I just said, so the neuron does a couple of computation, one is called the sum or the nets input and the other one, it's the activation. So let's take a look at the sum first. So here we have H which stands for the net input and H is nothing. It is just uh the sum over uh the, all the inputs multiplied by their respective weights. So in other words over here, uh H in this case is basically X one by W one plus X 2 W-2 plus X three, W three.",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=254s",
        "start_time": "254.339"
    },
    {
        "id": "0c2793f7",
        "text": "right. So as I just said, so the neuron does a couple of computation, one is called the sum or the nets input and the other one, it's the activation. So let's take a look at the sum first. So here we have H which stands for the net input and H is nothing. It is just uh the sum over uh the, all the inputs multiplied by their respective weights. So in other words over here, uh H in this case is basically X one by W one plus X 2 W-2 plus X three, W three. So the first phase in the first phase, the uh artificial neuron does this sum and, and it arrives at a net input, then",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=265s",
        "start_time": "265.98"
    },
    {
        "id": "5b5903bb",
        "text": "net input and H is nothing. It is just uh the sum over uh the, all the inputs multiplied by their respective weights. So in other words over here, uh H in this case is basically X one by W one plus X 2 W-2 plus X three, W three. So the first phase in the first phase, the uh artificial neuron does this sum and, and it arrives at a net input, then we have the second phase of the neuron where we have the activation itself. And so basically the output Y is a function of the activation function F where we pass in H which is the net input. So now there are a gazillion different activation functions in neural networks. But we'll be looking at one in particular right now because it's quite simple and it's very common as well",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=284s",
        "start_time": "284.6"
    },
    {
        "id": "0fe12814",
        "text": "So the first phase in the first phase, the uh artificial neuron does this sum and, and it arrives at a net input, then we have the second phase of the neuron where we have the activation itself. And so basically the output Y is a function of the activation function F where we pass in H which is the net input. So now there are a gazillion different activation functions in neural networks. But we'll be looking at one in particular right now because it's quite simple and it's very common as well called the sigmoid function. And so here on the right, you have the function Excel itself and on the left you have the graph of the function. So why is this a good function for being like an activation function? Well, first of all, it's bounded between zero and one. Then as you see here, it's a very smooth function. It doesn't have any discontinuity and this is great because it can be",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=311s",
        "start_time": "311.899"
    },
    {
        "id": "82f31c16",
        "text": "we have the second phase of the neuron where we have the activation itself. And so basically the output Y is a function of the activation function F where we pass in H which is the net input. So now there are a gazillion different activation functions in neural networks. But we'll be looking at one in particular right now because it's quite simple and it's very common as well called the sigmoid function. And so here on the right, you have the function Excel itself and on the left you have the graph of the function. So why is this a good function for being like an activation function? Well, first of all, it's bounded between zero and one. Then as you see here, it's a very smooth function. It doesn't have any discontinuity and this is great because it can be uh differentiated. So you can calculate the derivatives of this function quite easily. And so what this function does is basically modulating all the uh inputs and the net input into an output that's uh limited between zero and one,",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=322s",
        "start_time": "322.57"
    },
    {
        "id": "cbf24b50",
        "text": "called the sigmoid function. And so here on the right, you have the function Excel itself and on the left you have the graph of the function. So why is this a good function for being like an activation function? Well, first of all, it's bounded between zero and one. Then as you see here, it's a very smooth function. It doesn't have any discontinuity and this is great because it can be uh differentiated. So you can calculate the derivatives of this function quite easily. And so what this function does is basically modulating all the uh inputs and the net input into an output that's uh limited between zero and one, right. So if we take that function and we plug it into uh here, so into like this function over here, you'll see that we have this equation and this equation is basically the equation of a neuron starting from the inputs uh moving all the way to the output itself cool.",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=351s",
        "start_time": "351.415"
    },
    {
        "id": "88cd060a",
        "text": "uh differentiated. So you can calculate the derivatives of this function quite easily. And so what this function does is basically modulating all the uh inputs and the net input into an output that's uh limited between zero and one, right. So if we take that function and we plug it into uh here, so into like this function over here, you'll see that we have this equation and this equation is basically the equation of a neuron starting from the inputs uh moving all the way to the output itself cool. So this is somewhat like simple to understand, but it's always like uh nicer to have like examples to understand what's going on, like really in detail. So let's take an example here. And so here we have three inputs again with our very simple neurons.",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=380s",
        "start_time": "380.489"
    },
    {
        "id": "76345d67",
        "text": "right. So if we take that function and we plug it into uh here, so into like this function over here, you'll see that we have this equation and this equation is basically the equation of a neuron starting from the inputs uh moving all the way to the output itself cool. So this is somewhat like simple to understand, but it's always like uh nicer to have like examples to understand what's going on, like really in detail. So let's take an example here. And so here we have three inputs again with our very simple neurons. So the first one is 0.5 then we have 0.3 and then 0.2 and then we have um the respect the respective weights over here. So 0.4 naught 0.7 and N 0.2.",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=401s",
        "start_time": "401.44"
    },
    {
        "id": "bb306d8d",
        "text": "So this is somewhat like simple to understand, but it's always like uh nicer to have like examples to understand what's going on, like really in detail. So let's take an example here. And so here we have three inputs again with our very simple neurons. So the first one is 0.5 then we have 0.3 and then 0.2 and then we have um the respect the respective weights over here. So 0.4 naught 0.7 and N 0.2. So now let's calculate the output. Why? By going through the two phases of computations of a neuron. So the sum and the activation. So let's calculate the sum first. And if you guys remember the, activate the sum over here is calculated by multiplying X one by",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=428s",
        "start_time": "428.839"
    },
    {
        "id": "d4d95e9c",
        "text": "So the first one is 0.5 then we have 0.3 and then 0.2 and then we have um the respect the respective weights over here. So 0.4 naught 0.7 and N 0.2. So now let's calculate the output. Why? By going through the two phases of computations of a neuron. So the sum and the activation. So let's calculate the sum first. And if you guys remember the, activate the sum over here is calculated by multiplying X one by um W one plus X 2 W-2 plus uh X three W three, which in our case is, is basically 0.5 by 0.4. It's these two guys over here and then 0.3 by uh 0.7 plus 0.2",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=448s",
        "start_time": "448.67"
    },
    {
        "id": "6c18cc9e",
        "text": "So now let's calculate the output. Why? By going through the two phases of computations of a neuron. So the sum and the activation. So let's calculate the sum first. And if you guys remember the, activate the sum over here is calculated by multiplying X one by um W one plus X 2 W-2 plus uh X three W three, which in our case is, is basically 0.5 by 0.4. It's these two guys over here and then 0.3 by uh 0.7 plus 0.2 uh by 0.2. So if you run the map over there, you'll find that the input, the net input is equal to 0.45. Cool. So now we have our net input,",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=462s",
        "start_time": "462.109"
    },
    {
        "id": "b04dd82d",
        "text": "um W one plus X 2 W-2 plus uh X three W three, which in our case is, is basically 0.5 by 0.4. It's these two guys over here and then 0.3 by uh 0.7 plus 0.2 uh by 0.2. So if you run the map over there, you'll find that the input, the net input is equal to 0.45. Cool. So now we have our net input, let's uh arrive at the output by using the activation function. And as we said, we're going to use the sigmoid activation function. And so basically we are plugging in this 0.45 which is our input into the activation function.",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=485s",
        "start_time": "485.91"
    },
    {
        "id": "fbcf0ee7",
        "text": "uh by 0.2. So if you run the map over there, you'll find that the input, the net input is equal to 0.45. Cool. So now we have our net input, let's uh arrive at the output by using the activation function. And as we said, we're going to use the sigmoid activation function. And so basically we are plugging in this 0.45 which is our input into the activation function. And then we have the result which is no 0.61 that's the output of uh the neuron in this particular case. Now, we have an idea of how an artificial neuron uh works. So it's time to implement one from scratch in Python.",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=507s",
        "start_time": "507.119"
    },
    {
        "id": "ba989505",
        "text": "let's uh arrive at the output by using the activation function. And as we said, we're going to use the sigmoid activation function. And so basically we are plugging in this 0.45 which is our input into the activation function. And then we have the result which is no 0.61 that's the output of uh the neuron in this particular case. Now, we have an idea of how an artificial neuron uh works. So it's time to implement one from scratch in Python. Now we'll implement the artificial neuron in Python. And I'm using py charm as uh my idea of choice. Obviously, you can use whatever you want. If you want to use Jupiter notebooks, like, please feel free to do that. I'm just using Python because like I'm used it and I love it, right. So let's get started here. So the first thing that I'll do is I'll just",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=521s",
        "start_time": "521.968"
    },
    {
        "id": "dc9c27ea",
        "text": "And then we have the result which is no 0.61 that's the output of uh the neuron in this particular case. Now, we have an idea of how an artificial neuron uh works. So it's time to implement one from scratch in Python. Now we'll implement the artificial neuron in Python. And I'm using py charm as uh my idea of choice. Obviously, you can use whatever you want. If you want to use Jupiter notebooks, like, please feel free to do that. I'm just using Python because like I'm used it and I love it, right. So let's get started here. So the first thing that I'll do is I'll just ensure that we can run",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=539s",
        "start_time": "539.909"
    },
    {
        "id": "a48d59b3",
        "text": "Now we'll implement the artificial neuron in Python. And I'm using py charm as uh my idea of choice. Obviously, you can use whatever you want. If you want to use Jupiter notebooks, like, please feel free to do that. I'm just using Python because like I'm used it and I love it, right. So let's get started here. So the first thing that I'll do is I'll just ensure that we can run the scripts easily. So, and then what I want to do is basically replicate the um structure of the neuron that we had. So the inputs, the weights and then the calculations that we did. So the inputs will be",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=562s",
        "start_time": "562.59"
    },
    {
        "id": "5ccb2484",
        "text": "ensure that we can run the scripts easily. So, and then what I want to do is basically replicate the um structure of the neuron that we had. So the inputs, the weights and then the calculations that we did. So the inputs will be uh represented by a list, a simple list. And then we'll have the weights which again are going to be represented by lists. So if you guys remember the example, artificial neuron",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=591s",
        "start_time": "591.299"
    },
    {
        "id": "58bec3e4",
        "text": "the scripts easily. So, and then what I want to do is basically replicate the um structure of the neuron that we had. So the inputs, the weights and then the calculations that we did. So the inputs will be uh represented by a list, a simple list. And then we'll have the weights which again are going to be represented by lists. So if you guys remember the example, artificial neuron or the exa mle parameters for the simple artificial neuron I used uh before, you'll remember probably that we have 0.50 0.3 and 0.2 respectively for X one, X two and uh X three. And then for the weight, we would just associate uh like the numbers respecting the SA me indexes as the input. So for W one, we would have",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=595s",
        "start_time": "595.39"
    },
    {
        "id": "8e09c5b2",
        "text": "uh represented by a list, a simple list. And then we'll have the weights which again are going to be represented by lists. So if you guys remember the example, artificial neuron or the exa mle parameters for the simple artificial neuron I used uh before, you'll remember probably that we have 0.50 0.3 and 0.2 respectively for X one, X two and uh X three. And then for the weight, we would just associate uh like the numbers respecting the SA me indexes as the input. So for W one, we would have uh 0.4. And then for W-2, we would have naught 0.7. And finally, uh 0.2 for uh W uh three. And so this way, we've basically uh recreated uh in this very simple um data format, the inputs and the weights cool. Now, the next uh phase is to calculate the output",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=615s",
        "start_time": "615.14"
    },
    {
        "id": "ae42ef7a",
        "text": "or the exa mle parameters for the simple artificial neuron I used uh before, you'll remember probably that we have 0.50 0.3 and 0.2 respectively for X one, X two and uh X three. And then for the weight, we would just associate uh like the numbers respecting the SA me indexes as the input. So for W one, we would have uh 0.4. And then for W-2, we would have naught 0.7. And finally, uh 0.2 for uh W uh three. And so this way, we've basically uh recreated uh in this very simple um data format, the inputs and the weights cool. Now, the next uh phase is to calculate the output and the output is given by the activate function where we pass I both inputs and",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=630s",
        "start_time": "630.655"
    },
    {
        "id": "8d33fa80",
        "text": "uh 0.4. And then for W-2, we would have naught 0.7. And finally, uh 0.2 for uh W uh three. And so this way, we've basically uh recreated uh in this very simple um data format, the inputs and the weights cool. Now, the next uh phase is to calculate the output and the output is given by the activate function where we pass I both inputs and wait.",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=660s",
        "start_time": "660.63"
    },
    {
        "id": "11241aaf",
        "text": "and the output is given by the activate function where we pass I both inputs and wait. And obviously, you'll see here that the activate function doesn't exist because we haven't defined it yet. So it's not going to work.",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=690s",
        "start_time": "690.979"
    },
    {
        "id": "c6be5acc",
        "text": "wait. And obviously, you'll see here that the activate function doesn't exist because we haven't defined it yet. So it's not going to work. Um But this is a function that takes inputs and weights as um as parameters as arguments. And obviously this is the, the computational unit of the neuron itself. And it's that function that's going to be responsible for doing uh the net for performing the net input and then the activation function itself. And then as the last step over here, we're going to do a print",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=700s",
        "start_time": "700.69"
    },
    {
        "id": "a6b0f3f2",
        "text": "And obviously, you'll see here that the activate function doesn't exist because we haven't defined it yet. So it's not going to work. Um But this is a function that takes inputs and weights as um as parameters as arguments. And obviously this is the, the computational unit of the neuron itself. And it's that function that's going to be responsible for doing uh the net for performing the net input and then the activation function itself. And then as the last step over here, we're going to do a print and we're gonna just print the output so that we can sit. Now, obviously, if you, I'm gonna run this, as you can see here, I'm gonna get an error because activate obviously hasn't been defined. So we need to define activate, which is the, the core function for our",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=702s",
        "start_time": "702.809"
    },
    {
        "id": "80af6ae6",
        "text": "Um But this is a function that takes inputs and weights as um as parameters as arguments. And obviously this is the, the computational unit of the neuron itself. And it's that function that's going to be responsible for doing uh the net for performing the net input and then the activation function itself. And then as the last step over here, we're going to do a print and we're gonna just print the output so that we can sit. Now, obviously, if you, I'm gonna run this, as you can see here, I'm gonna get an error because activate obviously hasn't been defined. So we need to define activate, which is the, the core function for our um uh for our neuron. So as we said, we define activate and we pass uh two arguments. One is called inputs. The other one is called weights and so activate, does two things and it just replicates the two phases of a neuron that we've seen in the theoretical part of things. And so the first thing is just perform",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=710s",
        "start_time": "710.989"
    },
    {
        "id": "5c558cf2",
        "text": "and we're gonna just print the output so that we can sit. Now, obviously, if you, I'm gonna run this, as you can see here, I'm gonna get an error because activate obviously hasn't been defined. So we need to define activate, which is the, the core function for our um uh for our neuron. So as we said, we define activate and we pass uh two arguments. One is called inputs. The other one is called weights and so activate, does two things and it just replicates the two phases of a neuron that we've seen in the theoretical part of things. And so the first thing is just perform net input. And the second side of things is to uh perform the activation,",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=739s",
        "start_time": "739.789"
    },
    {
        "id": "1f24cbca",
        "text": "um uh for our neuron. So as we said, we define activate and we pass uh two arguments. One is called inputs. The other one is called weights and so activate, does two things and it just replicates the two phases of a neuron that we've seen in the theoretical part of things. And so the first thing is just perform net input. And the second side of things is to uh perform the activation, right? So how do we calculate the net input? So we have to loop obviously",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=759s",
        "start_time": "759.239"
    },
    {
        "id": "d10a618c",
        "text": "net input. And the second side of things is to uh perform the activation, right? So how do we calculate the net input? So we have to loop obviously uh through inputs and weights and we have to multiply them. And so we need to multiply basically the um inputs and weights on the SA me index. And so how do we do that? Well, it's quite simple. So we, we create a for loop and we have the X and WS and I",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=787s",
        "start_time": "787.409"
    },
    {
        "id": "dc319abf",
        "text": "right? So how do we calculate the net input? So we have to loop obviously uh through inputs and weights and we have to multiply them. And so we need to multiply basically the um inputs and weights on the SA me index. And so how do we do that? Well, it's quite simple. So we, we create a for loop and we have the X and WS and I uh we use the zip function over here and we pass in inputs and weights, right? Like this. So if you guys are not familiar with the zip function, like it's a very nice function because it enables you like to unpack two lists and to",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=798s",
        "start_time": "798.599"
    },
    {
        "id": "d4063975",
        "text": "uh through inputs and weights and we have to multiply them. And so we need to multiply basically the um inputs and weights on the SA me index. And so how do we do that? Well, it's quite simple. So we, we create a for loop and we have the X and WS and I uh we use the zip function over here and we pass in inputs and weights, right? Like this. So if you guys are not familiar with the zip function, like it's a very nice function because it enables you like to unpack two lists and to uh just like pass them to like these variables over here, index by index. And so like here, for example, when we go through the loop for the first time, this X is gonna be basically inputs at index zero. And this uh W over here is gonna be weights at the index zero, right? So once we have this, then we'll have the H",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=807s",
        "start_time": "807.859"
    },
    {
        "id": "c5205c93",
        "text": "uh we use the zip function over here and we pass in inputs and weights, right? Like this. So if you guys are not familiar with the zip function, like it's a very nice function because it enables you like to unpack two lists and to uh just like pass them to like these variables over here, index by index. And so like here, for example, when we go through the loop for the first time, this X is gonna be basically inputs at index zero. And this uh W over here is gonna be weights at the index zero, right? So once we have this, then we'll have the H that's going to be, we're going to just like sum, add up the multiplication of X by",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=832s",
        "start_time": "832.489"
    },
    {
        "id": "567cc7e1",
        "text": "uh just like pass them to like these variables over here, index by index. And so like here, for example, when we go through the loop for the first time, this X is gonna be basically inputs at index zero. And this uh W over here is gonna be weights at the index zero, right? So once we have this, then we'll have the H that's going to be, we're going to just like sum, add up the multiplication of X by uh W to H which is our net input. Obviously H is not defined here. So we need to predefined it, declare it over here.",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=852s",
        "start_time": "852.549"
    },
    {
        "id": "22476cf7",
        "text": "that's going to be, we're going to just like sum, add up the multiplication of X by uh W to H which is our net input. Obviously H is not defined here. So we need to predefined it, declare it over here. And so H is gonna start from zero and then we're gonna loop through all the inputs and weights and we're gonna multiply them and add them up to the net input. And so basically, now we're done. So the next step, once we have our H which is our net input is to perform the activation itself. So how do we do that? Well, uh it's kind of like really simple because the activation is, in our case",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=880s",
        "start_time": "880.28"
    },
    {
        "id": "09d05880",
        "text": "uh W to H which is our net input. Obviously H is not defined here. So we need to predefined it, declare it over here. And so H is gonna start from zero and then we're gonna loop through all the inputs and weights and we're gonna multiply them and add them up to the net input. And so basically, now we're done. So the next step, once we have our H which is our net input is to perform the activation itself. So how do we do that? Well, uh it's kind of like really simple because the activation is, in our case said that we're gonna use a sigmoid function activation. So we call sigmoid and we pass INH and now we can just return this and this is the output of the neuron itself. And this is like what we're gonna get down here. And then as a final thing, we just like print this output. Now again, sigmoid hasn't been",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=890s",
        "start_time": "890.099"
    },
    {
        "id": "f81ef172",
        "text": "And so H is gonna start from zero and then we're gonna loop through all the inputs and weights and we're gonna multiply them and add them up to the net input. And so basically, now we're done. So the next step, once we have our H which is our net input is to perform the activation itself. So how do we do that? Well, uh it's kind of like really simple because the activation is, in our case said that we're gonna use a sigmoid function activation. So we call sigmoid and we pass INH and now we can just return this and this is the output of the neuron itself. And this is like what we're gonna get down here. And then as a final thing, we just like print this output. Now again, sigmoid hasn't been um declare it defined anywhere. So we need to define this function. And so let's define it over here. So we define sigmoid, it's a function of X.",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=901s",
        "start_time": "901.479"
    },
    {
        "id": "de65e632",
        "text": "said that we're gonna use a sigmoid function activation. So we call sigmoid and we pass INH and now we can just return this and this is the output of the neuron itself. And this is like what we're gonna get down here. And then as a final thing, we just like print this output. Now again, sigmoid hasn't been um declare it defined anywhere. So we need to define this function. And so let's define it over here. So we define sigmoid, it's a function of X. And",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=929s",
        "start_time": "929.705"
    },
    {
        "id": "8de6c396",
        "text": "um declare it defined anywhere. So we need to define this function. And so let's define it over here. So we define sigmoid, it's a function of X. And if you",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=953s",
        "start_time": "953.159"
    },
    {
        "id": "4a37f21b",
        "text": "And if you uh guys remember, so this is, we can define this as 1.0 divided by one plus",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=969s",
        "start_time": "969.219"
    },
    {
        "id": "32820e3f",
        "text": "if you uh guys remember, so this is, we can define this as 1.0 divided by one plus the exponential,",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=971s",
        "start_time": "971.2"
    },
    {
        "id": "9ad6a13f",
        "text": "uh guys remember, so this is, we can define this as 1.0 divided by one plus the exponential, which is math X of minus X over here.",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=972s",
        "start_time": "972.84"
    },
    {
        "id": "1f4b8f12",
        "text": "the exponential, which is math X of minus X over here. Now we d we haven't defined this. Uh we haven't included uh this math module. So we need to include it because otherwise we're gonna get an error and so we're gonna import math. Uh Now the error",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=988s",
        "start_time": "988.2"
    },
    {
        "id": "e623692c",
        "text": "which is math X of minus X over here. Now we d we haven't defined this. Uh we haven't included uh this math module. So we need to include it because otherwise we're gonna get an error and so we're gonna import math. Uh Now the error is gone and so here we can return. Why? Perfect. So now we have all of the different elements in place. And so now when we run the script, we should be able to get an output and then print the output if you guys remember by using these inputs. And these,",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=990s",
        "start_time": "990.4"
    },
    {
        "id": "ac388761",
        "text": "Now we d we haven't defined this. Uh we haven't included uh this math module. So we need to include it because otherwise we're gonna get an error and so we're gonna import math. Uh Now the error is gone and so here we can return. Why? Perfect. So now we have all of the different elements in place. And so now when we run the script, we should be able to get an output and then print the output if you guys remember by using these inputs. And these, we, we got, when we run the, the math there, we got an output for the neuron of 0.61 something like that. So let's see if we are lucky and we're going to get like the same value. And as you see here, we do have the very same value. So uh the results of this",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=1000s",
        "start_time": "1000.539"
    },
    {
        "id": "1b8a94db",
        "text": "is gone and so here we can return. Why? Perfect. So now we have all of the different elements in place. And so now when we run the script, we should be able to get an output and then print the output if you guys remember by using these inputs. And these, we, we got, when we run the, the math there, we got an output for the neuron of 0.61 something like that. So let's see if we are lucky and we're going to get like the same value. And as you see here, we do have the very same value. So uh the results of this uh computation is 0.61 and that's correct. So here you have it, it's your first neuron implemented from scratch in Python.",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=1016s",
        "start_time": "1016.63"
    },
    {
        "id": "3a434b12",
        "text": "we, we got, when we run the, the math there, we got an output for the neuron of 0.61 something like that. So let's see if we are lucky and we're going to get like the same value. And as you see here, we do have the very same value. So uh the results of this uh computation is 0.61 and that's correct. So here you have it, it's your first neuron implemented from scratch in Python. Cool. So this was it for implementing an artificial neuron in Python. So before living, I want to give you some takeaway points. So as we've seen, artificial neurons are loosely inspired to biologically",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=1037s",
        "start_time": "1037.479"
    },
    {
        "id": "5229d76e",
        "text": "uh computation is 0.61 and that's correct. So here you have it, it's your first neuron implemented from scratch in Python. Cool. So this was it for implementing an artificial neuron in Python. So before living, I want to give you some takeaway points. So as we've seen, artificial neurons are loosely inspired to biologically neurons and neurons are computational unions and precisely what they do is they receive certain inputs and they modulate that input and using an activation function, they arrive at an output.",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=1060s",
        "start_time": "1060.88"
    },
    {
        "id": "c2964db9",
        "text": "Cool. So this was it for implementing an artificial neuron in Python. So before living, I want to give you some takeaway points. So as we've seen, artificial neurons are loosely inspired to biologically neurons and neurons are computational unions and precisely what they do is they receive certain inputs and they modulate that input and using an activation function, they arrive at an output. Cool. So this was it for uh artificial neurons. So now we have like an understanding of how uh like this uh units of computation work. So what's next Well, before getting into neural networks themselves, we have to understand a little bit more of math and specifically we are going to be looking at matrix operations and vector operations. So",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=1073s",
        "start_time": "1073.479"
    },
    {
        "id": "553f5d41",
        "text": "neurons and neurons are computational unions and precisely what they do is they receive certain inputs and they modulate that input and using an activation function, they arrive at an output. Cool. So this was it for uh artificial neurons. So now we have like an understanding of how uh like this uh units of computation work. So what's next Well, before getting into neural networks themselves, we have to understand a little bit more of math and specifically we are going to be looking at matrix operations and vector operations. So if you've enjoyed the video, please subscribe to the channel. Just leave a like and I guess I'll see you the next time. Cheers.",
        "video": "3- Implementing an artificial neuron from scratch",
        "playlist": "Audio Deep Learning with Python",
        "youtube_video_id": "qxIaW-WvLDU",
        "youtube_link": "https://www.youtube.com/watch?v=qxIaW-WvLDU&t=1090s",
        "start_time": "1090.079"
    }
]