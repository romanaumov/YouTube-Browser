{
    "jobName": "transcript-job-audio-assistant",
    "accountId": "337909742319",
    "status": "COMPLETED",
    "results": {
        "transcripts": [
            {
                "transcript": "Hi, everybody and welcome to a new exciting video in the audio signal processing for machine learning series. Last time we looked at mad frequency CEPT coefficients from a theoretical standpoint. In this video, I want to show you how you can extract MF CCS using Python and Libros. So let's get started with this Jupiter notebook. So the first thing I want to do is just import a bunch of libraries that we'll be using. So I'll import Li Brosa Libros dot display, ipython dot display, uh Pylot and then pie. So let's do that. Next thing we want to load uh an audio file. So which file are we gonna load? So it's a file that we, you should be familiar with by. Now it's a, a short passage of a piece from clothes, the Bey. So we're talking about classical music here. OK. So I'll do audio and then I have the file uh that's called the BC dot WAV. OK. So now first thing let's play back this audio file in the Jupiter network. So we'll do a in IP D dot audio and then pass in the path to the file. OK? And here we go. So let's listen to a little bit of this. OK? So if you followed along during the series, you probably recognize good. So the next thing that we wanna do, we want to actually load the uh the audio file using a li browser. And so, uh again, this is something that we've done multiple times. So we'll take the signal and the sampling rate over here and then we'll do a Lisa dot load. And then what we wanna pass is the audio file over here. And yes. And so here we have the sampling rate and here we have the signal. So let's take a look at the uh signal over here at the shape of the signal. And as you can see, we have this amount of samples uh in this uh waveform. Next step for us is extracting MF CCS, extract NF CCS. OK. So how do we do that? Well, this is extremely simple in Li Brosa because we have a function that does dash uh almost for free for us. So MS CC is equal to libros dot feature. And then MFCC like this and we want to pass in the signal, specify the number of MF CCS and we'll use like a traditional number which is equal to 13 and then specify the sampling rate like this. OK. Let's do this. OK? So here we have the MF CCS. Now, now let's take a look at the uh the shape of this MF CCS. And so this should be a dimensional array or a matrix. And so we'll do MF CCS dot shape. And as you can see, we have, the number of rows is equal to 13 and the number of columns that we have or in other words, like the different frames is equal to 1000 almost um 1300 frames or discrete time points. Next, we want to visualize the MF CCS. So let's write, visualize MF CCS. And so we can easily do this with a native function in libros that's called spec show. So let's get started. So we'll do a plot dot uh figure as the first thing and we want to specify the figure size of yeah of our figure. So we'll do a fig size and we'll set this equal to 25 by 10. OK. And now we are gonna be using the Li Brosa dot this play dot spectra function and this is a function that enables us to visualize any spectrogram like uh feature. So we'll pass in as arguments. The, obviously, the MF CCS will want to specify that the X axis uh is gonna have like time. And finally, we need to pass the sampling rate in. Now, this is gonna be a heat map like uh visualization. So we're gonna have like some colors. And what we wanna do is like having the ability to map these different colors to numerical values. So for that, we'll need a color bar. So we'll do a plot dot color bar. And here uh we have an argument called format and here we pass percentage plus to F and the last thing is just showing the um the, this visualization. So let's take a look at this. And here we go. So here we have the visualization. And as you can see on the X axis, we have uh time and uh like this, the BC musical passage is a 32nd long. And here on the Y axis, we have the different uh coefficients. So the different MFCC coefficients and if you count, you'll see that we have 13 coefficients, right? And at each point in this diagram, we have the value for a given MFCCMFCC index at a certain point in time. And here you have the, the mapping between like the uh the colors and the different numerical values. Next, we want to calculate the 1st and 2nd derivatives of the MF CCS. We saw this already in the previous video and we can call these features delta and delta delta MF CCS. And they are very important to tell us how the MS CCS change over time in an audio file. OK. So first of all, yeah, let me just add a few of this. So it becomes clear what I'm doing. And then let me just add a comment saying calculate delta and delta to MF CCS. OK. So how can we do that. Well, this is again, very simple because Li Brosa comes with a built in function for uh doing that. So we'll say delta MF CCS is equal to Li Li Brosa dot feature dot Delta, delta. And here we just pass the MF CCS and for the delta two MF CCS will use the uh very same function. So it's li browser dot feature dot delta and we'll pass once again the MF CCS here, but we should specify a keyword argument called order. And here we say the order is equal to two. And so this is the second derivative. OK. Yeah. So now let's take a look at the shape of this um delta MF CCS for example. So we'll do delta MF CCS dot A shape. And as you can see, they have the very same shape that we had for MF CCS. And if you don't remember if we do am F CCS dot uh shape, you can see. Yes. So we have 13 indexes and also like in the delta MF CCS because at the end of the day, we are just taking the first derivative, right? So 13 and then uh the number of frames that we have is equal to uh 1292. Now let me visualize delta MF CCS and delta delta MFCC. So how can we do that? Well, it's very simple. We just take like this piece of code here. Let's just get this, we'll put this one here and instead of MF CCS, we'll pass in delta uh MF CCS over here, let's do this. And so these are the delta MF CCS and now let's do the very same thing. But with a delta, delta MF CCS, it will pass in the delta to MF CCS. And here you go. OK. So here we have the original MF CCS. Here we have the first derivative of the MF CCS. And here the second uh derivative of the MF CCS, the final thing that I want to show you guys is taking the MF CCS and the 1st and 2nd derivatives of the MF CCS and co concatenating them together so that we have a unique audio uh feature that's like quite comprehensive because we have the MF CCS and we also have information about how does MF CCS change over time. Thanks to the derivatives. OK. So how can we do that? Well, this is very simple or if we use N? So we'll say that here we have uh yeah, let's call it uh comprehensive and MF CCS. And here we'll do a NP dot concatenate. And here we need to pass the three arrays that we wanna concatenate. So the first one is MF CCS and then we'll pass delta MF CCS and delta to MF CCS. And here we go. So now let's take a look at the shape of this comprehensive MF CCS audio feature. And not surprisingly here. We have that the number of rows, the first axis is equal to 39. And that's because we basically are concatenating like 13 indexes like for each of the three arrays, right? And so we get like a 39 here, whereas the number of columns remains unchanged. Great. By now, you should be able to extract MF CCS and 1st and 2nd derivative MF CCS using Python and Libres. And you should also be able to visualize them using Yeah, spectra from Libres. So in the next video, we'll be looking into uh frequency domain audio features. So I guess that's all for today. I hope you enjoyed the video. If that's the case, please remember to leave a like and if you haven't subscribed yet, please consider doing it. So I'll see you next time. Cheers."
            }
        ],
        "audio_segments": [
            {
                "id": 0,
                "transcript": "Hi, everybody and welcome to a new exciting video in the audio signal processing for machine learning series. Last time we looked at mad frequency CEPT coefficients from a theoretical standpoint. In this video, I want to show you how you can extract MF CCS using Python and Libros. So let's get started with this Jupiter notebook.",
                "start_time": "0.0",
                "end_time": "20.18"
            },
            {
                "id": 1,
                "transcript": "So the first thing I want to do is just import a bunch of libraries that we'll be using. So I'll import Li Brosa Libros dot display, ipython dot display, uh Pylot and then pie. So let's do that. Next thing we want to load uh an audio file.",
                "start_time": "20.389",
                "end_time": "37.169"
            },
            {
                "id": 2,
                "transcript": "So which file are we gonna load? So it's a file that we, you should be familiar with by. Now it's a, a short passage of a piece from clothes, the Bey. So we're talking about classical music here.",
                "start_time": "37.47",
                "end_time": "52.525"
            },
            {
                "id": 3,
                "transcript": "OK. So I'll do audio and then I have the file uh that's called the BC dot WAV. OK. So now first thing let's play back this audio file in the Jupiter network. So we'll do a in IP D dot audio and then pass in the path to the file. OK? And here we go. So let's listen to a little bit of this.",
                "start_time": "52.534",
                "end_time": "77.87"
            },
            {
                "id": 4,
                "transcript": "OK? So if you followed along during the series, you probably recognize",
                "start_time": "82.62",
                "end_time": "86.379"
            },
            {
                "id": 5,
                "transcript": "good. So the next thing that we wanna do, we want to actually load the uh the audio file using a li browser. And so, uh again, this is something that we've done multiple times. So we'll take the signal and the sampling rate over here and then we'll do a Lisa dot load. And then what we wanna pass is the audio file over here.",
                "start_time": "88.879",
                "end_time": "117.069"
            },
            {
                "id": 6,
                "transcript": "And yes. And so here we have the sampling rate and here we have the signal. So let's take a look at the uh signal over here at the shape of the signal. And as you can see, we have this amount of samples uh in this uh waveform. Next step for us is extracting MF CCS, extract NF CCS. OK. So",
                "start_time": "117.51",
                "end_time": "141.725"
            },
            {
                "id": 7,
                "transcript": "how do we do that? Well, this is extremely simple in Li Brosa because we have a function that does dash uh almost for free for us. So MS CC is equal to libros dot feature. And then MFCC like this and we want to pass in the signal, specify the number of MF CCS and we'll",
                "start_time": "141.735",
                "end_time": "165.96"
            },
            {
                "id": 8,
                "transcript": "use like a traditional number which is equal to 13 and then specify the sampling rate like this. OK. Let's do this. OK? So here we have the MF CCS. Now, now let's take a look at the uh the shape of this MF CCS. And so this should be a dimensional array or a matrix. And so we'll do MF CCS dot shape.",
                "start_time": "166.24",
                "end_time": "191.089"
            },
            {
                "id": 9,
                "transcript": "And as you can see, we have, the number of rows is equal to 13 and the number of columns that we have or in other words, like the different frames is equal to 1000 almost um 1300 frames or discrete time points. Next, we want to visualize the MF CCS.",
                "start_time": "191.24",
                "end_time": "211.74"
            },
            {
                "id": 10,
                "transcript": "So let's write, visualize MF CCS. And so we can easily do this with a native function in libros that's called spec show. So let's get started. So we'll do a plot dot uh figure as the first thing and we want to specify the figure size of yeah of our figure. So we'll do a fig size and we'll set this equal to 25 by 10. OK.",
                "start_time": "211.75",
                "end_time": "239.61"
            },
            {
                "id": 11,
                "transcript": "And now we are gonna be using the Li Brosa dot this play dot spectra function and this is a function that enables us to visualize any spectrogram like uh feature. So we'll pass in as arguments. The, obviously, the MF CCS will want to specify that the X axis uh is gonna have like time.",
                "start_time": "240.07",
                "end_time": "265.739"
            },
            {
                "id": 12,
                "transcript": "And finally, we need to pass the sampling rate in. Now, this is gonna be a heat map like uh visualization. So we're gonna have like some colors. And what we wanna do is like having the ability to map these different colors to numerical values. So for that, we'll need a color bar. So we'll do a plot dot color bar. And here",
                "start_time": "266.179",
                "end_time": "292.079"
            },
            {
                "id": 13,
                "transcript": "uh we have an argument called format and here we pass percentage plus to F and the last thing is just showing the um the, this visualization. So let's take a look at this. And here we go.",
                "start_time": "292.26",
                "end_time": "307.7"
            },
            {
                "id": 14,
                "transcript": "So here we have the visualization. And as you can see on the X axis, we have uh time and uh like this, the BC musical passage is a 32nd long. And here on the Y axis, we have the different uh coefficients. So the different MFCC coefficients and if you count, you'll see that we have 13 coefficients, right? And at each point in this diagram, we have the value for",
                "start_time": "307.869",
                "end_time": "335.859"
            },
            {
                "id": 15,
                "transcript": "a given MFCCMFCC index at a certain point in time. And here you have the,",
                "start_time": "336.19",
                "end_time": "345.88"
            },
            {
                "id": 16,
                "transcript": "the mapping between like the uh the colors and the different numerical values. Next, we want to calculate the 1st and 2nd derivatives of the MF CCS. We saw this already in the previous video and we can call these features delta and delta delta MF CCS. And they are very important",
                "start_time": "346.5",
                "end_time": "364.989"
            },
            {
                "id": 17,
                "transcript": "to tell us how the MS CCS change over time in an audio file. OK. So first of all, yeah, let me just add a few of this. So it becomes clear what I'm doing. And then let me just add a comment saying calculate delta and delta",
                "start_time": "365.0",
                "end_time": "385.64"
            },
            {
                "id": 18,
                "transcript": "to MF CCS. OK. So how can we do that. Well, this is again, very simple because Li Brosa comes with a built in function for uh doing that. So we'll say delta MF CCS is equal to Li Li Brosa dot feature dot Delta, delta. And here we just pass the MF CCS and for the delta two",
                "start_time": "387.179",
                "end_time": "417.059"
            },
            {
                "id": 19,
                "transcript": "MF CCS will use the uh very same function. So it's li browser dot feature dot delta and we'll pass once again the MF CCS here, but we should specify a keyword argument called order. And here we say the order is equal to two.",
                "start_time": "417.45",
                "end_time": "438.72"
            },
            {
                "id": 20,
                "transcript": "And so this is the second derivative. OK. Yeah. So now let's take a look at the shape of this um",
                "start_time": "439.39",
                "end_time": "447.45"
            },
            {
                "id": 21,
                "transcript": "delta MF CCS for example. So we'll do delta MF CCS dot A shape. And as you can see, they have the very same shape that we had for MF CCS. And if you don't remember if we do am F CCS dot uh shape, you can see. Yes. So we have 13 indexes and also like in the delta MF CCS because",
                "start_time": "447.7",
                "end_time": "470.875"
            },
            {
                "id": 22,
                "transcript": "at the end of the day, we are just taking the first derivative, right? So 13 and then uh the number of frames that we have is equal to uh 1292. Now let me visualize delta MF CCS and delta delta MFCC. So how can we do that? Well, it's very simple. We just take like this piece of code here.",
                "start_time": "470.885",
                "end_time": "494.07"
            },
            {
                "id": 23,
                "transcript": "Let's just get this,",
                "start_time": "494.73",
                "end_time": "496.97"
            },
            {
                "id": 24,
                "transcript": "we'll put this one here and instead of MF CCS, we'll pass in delta uh MF CCS over here, let's do this. And so these are the delta MF CCS and now let's do the very same thing. But with a delta, delta MF CCS, it will pass in the delta to MF CCS. And here you go. OK.",
                "start_time": "497.779",
                "end_time": "522.03"
            },
            {
                "id": 25,
                "transcript": "So here we have the original MF CCS. Here we have the first derivative of the MF CCS. And here the second uh derivative of the MF CCS, the final thing that I want to show you guys is taking the MF CCS and the 1st and 2nd derivatives of the MF CCS and co concatenating them together so that we have a unique",
                "start_time": "522.479",
                "end_time": "545.289"
            },
            {
                "id": 26,
                "transcript": "audio uh feature that's like quite comprehensive because we have the MF CCS and we also have information about how does MF CCS change over time. Thanks to the derivatives. OK. So how can we do that? Well, this is very simple or if we use N? So we'll say that here we have uh yeah, let's call it uh comprehensive and",
                "start_time": "545.299",
                "end_time": "570.039"
            },
            {
                "id": 27,
                "transcript": "MF CCS. And here we'll do a NP dot concatenate. And here we need to pass the three arrays that we wanna concatenate. So the first one is MF CCS and then we'll pass delta MF CCS and delta to MF CCS. And here we go. So now let's take a look at the shape of this comprehensive MF CCS audio feature.",
                "start_time": "570.419",
                "end_time": "597.45"
            },
            {
                "id": 28,
                "transcript": "And not surprisingly here. We have that the number of rows, the first axis is equal to 39. And that's because we basically are concatenating like 13 indexes like for each of the three arrays, right? And so we get like a",
                "start_time": "597.77",
                "end_time": "614.27"
            },
            {
                "id": 29,
                "transcript": "39 here, whereas the number of columns remains unchanged. Great. By now, you should be able to extract MF CCS and 1st and 2nd derivative MF CCS using Python and Libres. And you should also be able to visualize them using Yeah, spectra from Libres.",
                "start_time": "614.28",
                "end_time": "630.789"
            },
            {
                "id": 30,
                "transcript": "So in the next video, we'll be looking into uh frequency domain audio features. So I guess that's all for today. I hope you enjoyed the video. If that's the case, please remember to leave a like and if you haven't subscribed yet, please consider doing it. So I'll see you next time. Cheers.",
                "start_time": "630.96",
                "end_time": "651.59"
            }
        ]
    }
}