{
    "jobName": "transcript-job-audio-assistant",
    "accountId": "337909742319",
    "status": "COMPLETED",
    "results": {
        "transcripts": [
            {
                "transcript": "Hi, everybody and welcome to a new exciting video in the audio signal processing for machine learning series. Last time, we looked at the theory behind a few frequency domain audio features. This time, I'm gonna implement one of those from scratch in Python. And the one that I'll be implementing is called band energy ratio. I'm not gonna get too much into the the theoretical details of this because I've done this like in the previous video. So if you find yourself not understanding what I'm talking about, just go back to my previous video which should be over here. OK? So let's take a look at this notebook. Uh And as you can see, I've already implemented some code and that's because this is like stuff that we've seen multiple times throughout this series and I didn't want to spend my time like coding, typing this down. OK? So the first thing that it is I uh import some libraries that we need, then I load the audio file. So I have a couple of audio files that uh I'll be working with today. So one is a red, red hot chili peppers song and we've heard this time and again throughout the series. And the other one is a classical music piece by uh Claude uh De Bey. So let's quickly listen to this too. So, yeah, this is a lush string driven orchestra piece by uh the PC. And here we have the song by the red hot chili peppers. OK? You get the idea, right? And so what I do next is just I load the audio files which are Li Brosa using the this Libros do load and I get the um the waveform really. So like an Empire Ray and then the the sample rate which is the 42 22,050 Hertz. And then given we are working with uh frequency domain features and bands energy ratio is a frequency domain uh feature. What I want to do is just extract the spectrogram. And so how do I do that? Well, uh I just here once again, uh a simple function from Libros that's called Libros dot Stft and I pass in a couple of constants. So the frame size and the hot size and I obtain the spectrogram for the BC and red hot chili peppers. Now, if you don't know what a spectrogram is I or like short time fourier transform is I have a bunch of videos on this uh topics uh in this series. So I highly suggest you to go check out before like moving along with this video. Let's now move on to the cool stuff and start calculating the band energy ratio. So let me add a few boxes down here and I'll use some mark down to say yeah, coate a band energy uh ratio. Ok. So let's take a quick look at the definition of the band energy ratio. So here we have the definition from yeah uh the the previous video basically. So and here you can see that the band energy ratio at time two. So at a given frame is given by this formula here. So the, the key thing that we want to uh get of as the first point is the split frequency F capture F because this is the one if you recall, that's gonna tell us uh that's gonna give us like the threshold that we'll use to say. OK. So all the frequencies above this frequency are uh belong to the higher frequencies and all the frequencies below the split frequency below to the lower frequencies. But now, obviously, uh we can pass in a continuous frequency like in Hertz like 2000 Hertz or 3000 Hertz. But the spectrogram has discrete values, right? So it has discrete frequency bins. So we need to create a function that maps a continuous frequency onto the discrete frequency bins that we have. And so that's what we want to build now. So we'll uh define a function and we'll cal we'll call it, calculate uh split frequency bin like this and this uh function accepts a few parameters. So first of all, it, it accepts a spectrogram, then the split frequency and finally the sample rate. OK. So now let's uh see what we should do here like all the different steps. So as the first thing, what we want to calculate is the frequency range that we have in the spectrogram. In other words, so we want to ask ourselves. So how uh what's the frequency range that we are capturing in the spectrogram? And now to show you what I mean here, let me just go back and take a look at the, for example, at the, the BC spectrogram. So uh I want to just like take the shape here of this. And as you can see like in the uh the, the shape of this spectrogram is given, it's, it's kind of like a two dimensional array, right? And so on the first dimension we have 1025 and that is the number of frequency bins that we have, right? And so what we want to really understand is like what do does 1025 frequency bins like uh correspond to in terms of like frequency range? OK. So, and how do we do that? Well, this is like uh something that we can easily do because uh we know that the spectrogram um reduces the its like frequency range from the sample range, it moves on to the NICS frequency. And so we can obtain that by uh doing the sample rate divided by two, the next logical step here is to calculate the delta uh frequency between two adjacent uh bins. So in other words, how much, so when we move, say from frequency bin to number three to frequency bin four, so how much do we actually move in the continuous frequency? Right. And so we can do that by saying that the frequency delta per bin is equal to the frequency range divided by the total number of frequency bins that we have. And we can easily get that from the spectrogram. So we do a spectrogram dot a shape and we take the first dimension and the first dimension as we sow is equal to the number of bins that we have in the spectrogram. OK. So now we know the frequency delta for each bin. And so we are now ready to uh calculate the um split frequency bin. So the split frequency bin uh is equal to the uh split frequency. And this is given in Hertz and that's divided by the frequency delta per bin. In other words, what we are doing is we are mapping this continuous um frequency, that's the split frequency onto the, the closest frequency uh bin available. And uh but uh you, you may see here that uh given like we have two numbers. So the frequency to frequency delta per bin, it's likely that we're gonna get like some kind of a float number. And obviously the the frequency bins that we have are the script and that, that's the whole point of having like this critic here. So we can't take a frequency bin that's equal to 10.4. It doesn't make sense, right? So we have to move to uh an integer number. So we have to round up the numbers. So what, what can we do to round this round this number? So we can use the NP dot uh floor function and what this function does, it's a form of rounding and it always round uh rounds uh numbers down. So for example, say I have 10.4 and then if I apply the floor uh when it gets back a stem and I get it as a, as a float number. Uh If I have like 10.9 again, I'm gonna get 10 0.0 like this. OK? So here we have the split frequency bin. So now we can return it. But as I mentioned, this is a float number. So we want to cast it to an IND. OK. So this should be ready. So now let's try it. So we can say split frequency uh bin and then we use this one, calculate split frequency bin. So as the spectrogra M, we just pass the, the PC spectrogram. And then uh as the split frequency, we, we're gonna be using 2000 Hertz which is a totally fine uh split frequency. And as the sample reach, I'm gonna use the default rere one which is 22,050. And now let's print this split frequency bin like this. And as you can see, OK. So uh the 2000 Hertz split frequency has been uh mapped onto this frequency bin which is 100 and 85 which is 100 and 85 out of uh 1025 frequency bins that we have in the spectrogram. OK? So with this knowledge, we can now move on and actually calculate the um band energy ratio. So let's write the function here. So we'll do that definition with defined kate band energy uh ratio. And this function gets three parameters once again. So it gets the spectrogram, it gets the split frequency and the sample rate C and obviously these are the same that we are using in calculated frequency bin. OK. So the uh first step is to actually get the split frequency bin, right? And so we can easily do this by using our newly implemented function. So we'll call calculator splits frequency bin and we'll pass in all of these arguments. And that function will be so nice as to give us back the expected split frequency uh bin. OK. So now the next thing that we wanna do is to move to the power spectrogram. OK? And why do we do that? Well, we do that because as you can recall, probably like from this formula from last B or just like looking at it. Now, we are interested in the uh power spectrograms here. So this MT of N squared is basically like the magnitude spectrogram. Uh So it's kind of like the power spectrogram, right? Because we are taking the magnitude spectrogram here uh for a given frame at a groan frequency bin. And we are squaring it, which basically means we are moving from the magnitude spectrogram to to from the magnitude to the, to the power. OK. And so rather than calculating this uh power uh at each point in time and frequency bin will just like calculate it once initially. So what I want to do, as I said is like move to, to the power spectrogram. And so how can I do that? Well, this is quite simple because uh we start from the spectrogram which has complex values and we apply the uh absolute value to Dutch. And so we'll do an NPI dot Arbs and I'll pass in the uh spectrogram. And if we did only this, we would have the magnitude um spectrogram. But now we are going to be squaring this so that we can get the power spectrogram. Now, there's another trick that we need to apply here. And that's because we're going to be calculating the band energy ratio at each frame. So we want to iterate through the power spectrogram and, and be able to iterate like frame by frame. But now if you take a look at the spectrogram like this, here, you'll see that the shape is given by. Yeah, it's a two by this, it's a two dimensional, right? But the first dimension is the the frequency dimension and the second one is the time dimension. So in other words, here we have like the number of frequency bins and here we have the number of frames. Now if we want to iterate uh through this uh yeah, the spectrogram or the power spectrogram uh based off time. So what we need to do is just like invert, get the so called transpose of this um thing here of the spectrogram. And so how can we do that? And that's very, very simple. So let me just like get this and say W spec transpose and this is equal to the BC spec dot capital T and this will give us the so called transpose of the spectrogram of, of a matrix or NR A. So now if we take a look at the shape here, you'll see that's what happened was kind of like the inversion of these two dimensions. So now I have the um the time dimension first, so the number of frames and then I have the frequency as the second dimension. And this is what we want to do on our power spectrogram. So we'll do like this. A power spectrum is equal to power spec dot capital T. And so this way we just get the transfer of the power uh spectrum. OK? So now let's create a variable like this. So an empty list like this and this is where we'll cash the band energy ratio for each frame. And remember the band energy ratio as as a feature is is a frame best frame based feature. So we're going to have a value a band energy ratio for each frame. So and we'll be cashing it for each frame here like in this variable called band energy ratio here. OK. So we'll do now I will iterate through all the frames in the power spectrogram. I'd say we'll do four frequencies and frame uh in power spectrogram. So what should we do here? Well, so here we are iterating through all the frames and getting like the the the the value like of the of the uh for each frequencies, right? Like uh for each frame. In other words, what we want to do here is calculate the band energy ratio for each frame. So let me put a password time being. And so what should we do here? Well, it's quite straightforward. So what we want to uh calculate uh is like this two items. So the numerator and the denominator. So the numerator is basically the the sum of the power in the lower energies and the denominator corresponds to the sum of the power in the higher frequencies. So let's do that. So we'll do some power low uh frequencies frequencies. And how do we calculate this? Well, uh we can use NP dot Sun and then we'll pass in the frequencies infra here. But we want some across all the values or across all the frequencies. But rather just take the first uh frequency bins up to the split frequency then. OK. So, and uh it's gonna be easy to do the same thing for the high frequency. But so let me just like rewrite this as high. So some power high frequencies and so here will sum the values uh uh all the, the, the values for the power at all the different frequency bins in the higher um part of the spectrum. And so what this actually means is that we'll slice this starting from the split frequency bin and then go up to like the, the the last frequency bin, the highest frequency bin. OK. So now with this, we have both of the elements. So the numerator and the denominator here in this um formula. So what remains to you to do is just like to divide this. OK. So we'll do that the uh band energy uh ratio uh current frame is equal to the sum power of the uh low frequencies divided by the sum of the power for the high frequencies like this. OK. So the next step here is to just uh append the band energy ratio for the current frame to the band energy ratio. List here so that we can catch the value of the uh band uh energy ratio uh for the current frame. So we'll do a band energy ratio dot uh append and we'll pass in the band energy ratio of the current frame like this. Ok? So now we are ready to return and I'll just cast this list to a NPI array. So I'll do an NPI dot array and we'll pass the band energy ratio like this, ok? So now let's see if this works. So what I want to do is to get the band energy ratio for uh the BC. And so the way I'll do this is I'll call the calculator band energy ratio and I'll pass in the spectrogram and the spectrogram here is gonna be this, the PC spec then I'll need to specify the split frequency. So the split frequency will be using 2000. That as I said is a totally fine uh split frequency. And then for the Sa Mle rate, we, if you remember guys like when we load it, uh the waveform here, we got back like the simple rates that's defaulted to 22 2050. But I'll get like this sr over here like this, ok? So now let's take a look at the band's energy ratio um shape. Let's take a look at this, ok? So this is a numpy array uh which only like one dimension and it has 1292 items in it. And is it correct? Well, it is correct because if you guys remember here, like in the spectrogram, we had uh well, this is the transpo spectrogram. So here like in the first dimension, we have the, the, the time dimension which is equal to 1292 which is the same number for spent energy ratio array. And that basically means that we're getting like values for all the uh different frames that we have in the spectrum, which is what we were looking for. Ok. So now let me do the same thing. So let me also get the band energy ratio for the red hot chili pepper, red hots song. And so here obviously I need to pass the red hot spectrogram. OK? Good. OK. So the last thing that now remains to do is they actually visualize this uh bent energy ratio curves. And I also want to compare this two so that we can draw some conclusion about sp energy ratio curves in different genres like in this case, music and classical music. OK. So now, first of all, let me add uh a few blocks like this and then I'll Yeah, well, not that I want the mark mark down and I'll say V URL bands and A G ratio curves. First thing we wanna do is create a figure. So we'll do plot dot uh figure and I'll pass a fig size and I'll set this to 25 by 10 like this. OK? So next we want to create a plot, so we'll do plot dot plot and here we should pass three things. So the value for the X axis, which is gonna be time for us and then the value for the Y axis, which is the actual um band energy ratio array and then an optional color so that we can identify the two different curves for the BC uh stuff and for red hot chili pepper salt. OK? So let's do the first thing. So we'll pass t now t doesn't exist yet. So, uh but for the time being, I'll put it there as a placeholder, then I'll pass the band energy ratio for the BC as the Y axis and then for uh the color outside blue for the BC. OK? So we'll do the same thing for the uh red hot chili pepper song. So here I'll pass the relative uh band to energy ratio uh array. And here we'll set this color equal to uh red. And finally, we'll do a plot dot show. Now, obviously, if I get on and press enter, I get uh an error because the T is not defined. We don't have a value for that. So I should implement that first thing I want to just like bring up one of these boxes here so that I can find T. So 1st, 1st off, I need to define uh frames and this is gonna be equal to a range and I'll get the uh length of the say bear the BC band energy ratio uh array for the BC. And the, the length is going to be equal for the BC and the red hot chili pepper. So I can use just one. OK. So here, now I have like this value for this variable frames and now I can move on and implement T and here what I can do is use uh Libres. And uh here Libres has a nice utility function called frames to uh time. And what it it needs as arguments is the frames. And then I should um specify the hop length and the hop length I think we specified up here as a constant called hop size, which is equal to 512. So totally uh yeah, traditional number for that. OK. So we'll do this. OK? And so here what it gets is basically like the, the value of time at each frame. So let, let me show you what I mean by that. So uh here T is an array and the uh length uh of T is equal to 1292. So these are all like the, the frames and for at each frame, uh we're just like converting uh from just like in to like the relative time given the hop length that we are using now that we have T we can move on and plot our band energy ratio for the two songs. So, and as you can see in blue, we have the band energy ratio for the BC piece. And in red, we have the one for the red hot chili pepper song. And there's a stark difference between the two and basically the B energy ratio is way higher for the BC PS than the red hot chili peppers ones. And that's usually the case, it's something that you find uh quite often when you compare classical music with rock music. And that's because in classical music, most of the energy is concentrated in the lower end of the spectrum. Whereas in rock music, you have a more balanced distribution and that's probably has to do with the fact that there are a lot of like noisy uh sounds like snares or like stuff like this that just like provides energy or offers energy in the higher end of the spectrum in rock music. OK. So uh by now, you should be able to have, well, you should have like a very deep understanding of band energy ratio, how to calculate it from scratch with Python. And you probably also have an idea of how bent energy ratio like works in different genres, which is great. So that's all really for today. So next time we'll be uh looking into the remaining two frequency to all your features and how to like implement, but we won't implement them from scratch, but rather we'll be using uh Li Breza for uh implementing them. So if you've enjoyed the video, please leave a like if you haven't subscribed and want more content like this, please uh subscribe to the channel and I guess I'll see you next time. Cheers."
            }
        ],
        "audio_segments": [
            {
                "id": 0,
                "transcript": "Hi, everybody and welcome to a new exciting video in the audio signal processing for machine learning series. Last time, we looked at the theory behind a few frequency domain audio features. This time, I'm gonna implement one of those from scratch in Python. And the one that",
                "start_time": "0.31",
                "end_time": "16.694"
            },
            {
                "id": 1,
                "transcript": "I'll be implementing is called band energy ratio. I'm not gonna get too much into the the theoretical details of this because I've done this like in the previous video. So if you find yourself not understanding what I'm talking about, just go back to my previous video which should be over here.",
                "start_time": "16.704",
                "end_time": "33.099"
            },
            {
                "id": 2,
                "transcript": "OK? So let's take a look at this notebook. Uh And as you can see, I've already implemented some code and that's because this is like stuff that we've seen multiple times throughout this series and I didn't want to spend my time like coding, typing this down.",
                "start_time": "33.34",
                "end_time": "48.56"
            },
            {
                "id": 3,
                "transcript": "OK? So the first thing that it is I uh import some libraries that we need, then I load the audio file. So I have a couple of audio files that uh I'll be working with today. So one is a red, red hot chili peppers song and we've heard this time and again throughout the series. And the other one is a classical music piece by uh Claude uh De Bey. So let's quickly listen to this too.",
                "start_time": "48.79",
                "end_time": "75.269"
            },
            {
                "id": 4,
                "transcript": "So, yeah, this is a lush string",
                "start_time": "77.279",
                "end_time": "81.069"
            },
            {
                "id": 5,
                "transcript": "driven orchestra piece by uh the PC.",
                "start_time": "81.599",
                "end_time": "85.83"
            },
            {
                "id": 6,
                "transcript": "And here we have the song by the red hot chili peppers.",
                "start_time": "86.51",
                "end_time": "89.769"
            },
            {
                "id": 7,
                "transcript": "OK? You get the idea, right? And so what I do next is just I load the audio files which are Li Brosa using the this Libros do load and I get the um the waveform really. So like an Empire Ray and then the the sample rate which is the 42 22,050 Hertz. And then given we are working with uh",
                "start_time": "93.18",
                "end_time": "116.68"
            },
            {
                "id": 8,
                "transcript": "frequency domain features and bands energy ratio is a frequency domain uh feature. What I want to do is just extract the spectrogram. And so how do I do that? Well, uh I just here once again, uh a simple function from Libros that's called Libros dot Stft and I pass in a couple of constants. So the frame size and the hot size and I obtain the spectrogram for the BC and red hot chili peppers. Now, if you don't know what a spectrogram is",
                "start_time": "117.029",
                "end_time": "145.955"
            },
            {
                "id": 9,
                "transcript": "I or like short time fourier transform is I have a bunch of videos on this uh topics uh in this series. So I highly suggest you to go check out before like moving along with this video. Let's now move on to the cool stuff and start calculating the band energy ratio. So let me add a few",
                "start_time": "145.964",
                "end_time": "166.61"
            },
            {
                "id": 10,
                "transcript": "boxes down here and I'll use some mark down to say yeah, coate a band energy uh ratio. Ok.",
                "start_time": "167.679",
                "end_time": "180.69"
            },
            {
                "id": 11,
                "transcript": "So let's take a quick look at the definition of the band energy ratio. So here we have the definition from yeah uh the the previous video basically. So and here you can see that the band energy ratio at time two. So at a given frame is given by this formula here. So the, the key thing that we want to uh get of as the first point is the split frequency F capture",
                "start_time": "180.96",
                "end_time": "205.94"
            },
            {
                "id": 12,
                "transcript": "F because this is the one if you recall, that's gonna tell us uh that's gonna give us like the threshold that we'll use to say. OK. So all the frequencies above this frequency are uh belong to the higher frequencies and all the frequencies below the split frequency below to the lower frequencies. But now, obviously, uh we can pass in a continuous frequency like in Hertz like 2000 Hertz or 3000 Hertz. But",
                "start_time": "205.949",
                "end_time": "230.94"
            },
            {
                "id": 13,
                "transcript": "the spectrogram has discrete values, right? So it has discrete frequency bins. So we need to create a function that maps a continuous frequency onto the discrete frequency bins that we have. And so that's what we want to build now. So we'll uh define a function and we'll cal we'll call it, calculate uh split",
                "start_time": "231.22",
                "end_time": "255.289"
            },
            {
                "id": 14,
                "transcript": "frequency bin like this and this uh function accepts a few parameters. So first of all, it, it accepts a spectrogram, then the split frequency and finally the sample rate. OK.",
                "start_time": "256.239",
                "end_time": "276.75"
            },
            {
                "id": 15,
                "transcript": "So now let's uh see what we should do here like all the different steps. So as the first thing, what we want to calculate is the frequency range that we have in the spectrogram. In other words, so we want to ask ourselves. So how uh what's the frequency range that we are capturing in the spectrogram? And now to show you what I mean here, let me just go back and take a look at the, for example, at the, the BC spectrogram. So",
                "start_time": "277.6",
                "end_time": "307.13"
            },
            {
                "id": 16,
                "transcript": "uh I want to just like take the shape here of this. And as you can see like in the uh the, the shape of this spectrogram is given, it's, it's kind of like a two dimensional array, right? And so on the first dimension we have 1025 and that is the number of frequency bins that we have, right? And so what we want to really understand is like",
                "start_time": "307.279",
                "end_time": "329.51"
            },
            {
                "id": 17,
                "transcript": "what do does 1025 frequency bins like uh correspond to in terms of like frequency range? OK. So, and how do we do that? Well, this is like uh something that we can easily do because uh we know that the spectrogram",
                "start_time": "329.739",
                "end_time": "346.619"
            },
            {
                "id": 18,
                "transcript": "um reduces the its like frequency range from the sample range, it moves on to the NICS frequency. And so we can obtain that by",
                "start_time": "348.269",
                "end_time": "358.869"
            },
            {
                "id": 19,
                "transcript": "uh doing the sample rate divided by two, the next logical step here is to calculate the delta uh frequency between two adjacent uh bins. So in other words, how much, so when we move, say from frequency bin to number three to frequency bin four, so how much do we actually move in the continuous frequency? Right. And so we can do that by saying that the frequency",
                "start_time": "359.049",
                "end_time": "388.739"
            },
            {
                "id": 20,
                "transcript": "delta per bin",
                "start_time": "389.44",
                "end_time": "393.059"
            },
            {
                "id": 21,
                "transcript": "is equal to the frequency range divided by the total number of frequency bins that we have. And we can easily get that from the spectrogram. So we do a spectrogram dot a shape",
                "start_time": "393.839",
                "end_time": "409.339"
            },
            {
                "id": 22,
                "transcript": "and we take the first dimension and the first dimension as we sow is equal to the number of bins that we have in the spectrogram. OK. So now we know the frequency delta for each bin. And so we are now ready to uh calculate the um split frequency bin. So the split frequency bin",
                "start_time": "409.489",
                "end_time": "433.73"
            },
            {
                "id": 23,
                "transcript": "uh is equal to the uh split frequency. And this is given in Hertz and that's divided by the frequency delta per bin. In other words, what we are doing is we are mapping this continuous um frequency, that's the split frequency onto the, the closest frequency uh bin available.",
                "start_time": "434.359",
                "end_time": "461.649"
            },
            {
                "id": 24,
                "transcript": "And uh but uh you, you may see here that uh given like we have two numbers. So the frequency to frequency delta per bin, it's likely that we're gonna get like some kind of a float number. And obviously the the frequency bins that we have are",
                "start_time": "461.839",
                "end_time": "477.184"
            },
            {
                "id": 25,
                "transcript": "the script and that, that's the whole point of having like this critic here. So we can't take a frequency bin that's equal to 10.4. It doesn't make sense, right? So we have to move to uh an integer number. So we have to round up the numbers. So what, what can we do to round this round this number? So we can use the NP dot uh floor function",
                "start_time": "477.195",
                "end_time": "504.679"
            },
            {
                "id": 26,
                "transcript": "and what this function does, it's a form of rounding and it always round uh rounds uh numbers down. So for example, say I have 10.4 and then if I apply the floor uh when it gets back a stem",
                "start_time": "505.079",
                "end_time": "522.609"
            },
            {
                "id": 27,
                "transcript": "and I get it as a, as a float number. Uh If I have like 10.9 again, I'm gonna get 10",
                "start_time": "523.59",
                "end_time": "532.239"
            },
            {
                "id": 28,
                "transcript": "0.0 like this. OK? So here we have the split frequency bin. So",
                "start_time": "532.809",
                "end_time": "539.5"
            },
            {
                "id": 29,
                "transcript": "now we can return it. But as I mentioned, this is a float number. So we want to cast it to an IND.",
                "start_time": "540.01",
                "end_time": "546.94"
            },
            {
                "id": 30,
                "transcript": "OK. So",
                "start_time": "549.349",
                "end_time": "551.53"
            },
            {
                "id": 31,
                "transcript": "this should be ready. So now let's try it. So we can say split frequency uh bin and then we use this one, calculate split frequency bin. So as the spectrogra M, we just pass the, the PC spectrogram. And then uh as the split frequency, we, we're gonna be using 2000 Hertz which is a totally fine",
                "start_time": "552.52",
                "end_time": "579.469"
            },
            {
                "id": 32,
                "transcript": "uh split frequency. And as the sample reach, I'm gonna use the default rere one which is 22,050.",
                "start_time": "579.63",
                "end_time": "586.27"
            },
            {
                "id": 33,
                "transcript": "And now let's print this",
                "start_time": "587.109",
                "end_time": "590.369"
            },
            {
                "id": 34,
                "transcript": "split frequency bin like this. And as you can see, OK. So",
                "start_time": "591.409",
                "end_time": "596.109"
            },
            {
                "id": 35,
                "transcript": "uh the 2000 Hertz split frequency has been uh mapped onto this frequency bin which is 100 and 85 which is 100 and 85 out of uh 1025 frequency bins that we have in the spectrogram. OK?",
                "start_time": "597.429",
                "end_time": "614.479"
            },
            {
                "id": 36,
                "transcript": "So with this knowledge, we can now move on and actually calculate the um band energy ratio. So let's write the function here. So we'll do that definition with defined kate band energy uh ratio. And this function gets three parameters once again. So it gets the spectrogram,",
                "start_time": "614.76",
                "end_time": "643.429"
            },
            {
                "id": 37,
                "transcript": "it gets the split frequency and the sample rate C and obviously these are the same that we are using in calculated frequency bin. OK. So the uh first step is to actually get the split frequency bin, right? And so we can easily",
                "start_time": "643.669",
                "end_time": "665.179"
            },
            {
                "id": 38,
                "transcript": "do this by using our newly implemented function. So we'll call calculator splits frequency bin and we'll pass in all of these arguments. And that function",
                "start_time": "665.789",
                "end_time": "679.159"
            },
            {
                "id": 39,
                "transcript": "will be so nice as to give us back the expected split frequency uh bin. OK. So now the next thing that we wanna do is to move to the power spectrogram. OK?",
                "start_time": "679.75",
                "end_time": "696.2"
            },
            {
                "id": 40,
                "transcript": "And why do we do that? Well, we do that because as you can recall, probably like from this formula from last B or just like looking at it. Now, we are interested in the uh power spectrograms here. So this MT of N squared is basically like the magnitude spectrogram.",
                "start_time": "696.429",
                "end_time": "717.07"
            },
            {
                "id": 41,
                "transcript": "Uh So it's kind of like the power spectrogram, right? Because we are taking the magnitude spectrogram here uh for a given frame at a groan frequency bin. And we are squaring it, which basically means we are moving from the magnitude spectrogram to to",
                "start_time": "717.309",
                "end_time": "732.724"
            },
            {
                "id": 42,
                "transcript": "from the magnitude to the, to the power. OK. And so rather than calculating this uh power uh at each point in time and frequency bin will just like calculate it once initially. So what I want to do, as I said is like move to, to the power spectrogram.",
                "start_time": "732.734",
                "end_time": "752.369"
            },
            {
                "id": 43,
                "transcript": "And so how can I do that? Well, this is quite simple because uh we start from the spectrogram which has complex values and we apply the uh absolute value to Dutch. And so we'll do an NPI dot Arbs and I'll pass in the uh spectrogram.",
                "start_time": "752.53",
                "end_time": "773.63"
            },
            {
                "id": 44,
                "transcript": "And if we did only this, we would have the magnitude um spectrogram. But now we are going to be squaring this so that we can get the power spectrogram. Now, there's another trick that we need to apply here. And that's because we're going to be calculating the band energy ratio at each frame.",
                "start_time": "773.9",
                "end_time": "796.34"
            },
            {
                "id": 45,
                "transcript": "So we want to iterate through the power spectrogram and, and be able to iterate like frame by frame. But now if you take a look at the spectrogram like this, here, you'll see that the shape is given by. Yeah, it's a two by this, it's a two dimensional, right? But the first dimension is the the frequency dimension and the second one is the time dimension.",
                "start_time": "796.549",
                "end_time": "822.88"
            },
            {
                "id": 46,
                "transcript": "So in other words, here we have like the number of frequency bins and here we have the number of frames. Now if we want to iterate uh through this uh yeah, the spectrogram or the power spectrogram",
                "start_time": "823.02",
                "end_time": "835.7"
            },
            {
                "id": 47,
                "transcript": "uh based off time. So what we need to do is just like invert, get the so called transpose of this um thing here of the spectrogram. And so how can we do that? And that's very, very simple. So let me just like get this and say W spec transpose and this is equal to the BC spec dot capital T",
                "start_time": "835.84",
                "end_time": "864.02"
            },
            {
                "id": 48,
                "transcript": "and this will give us the so called transpose of the spectrogram of, of a matrix or NR A. So now if we take a look at the shape here,",
                "start_time": "864.349",
                "end_time": "875.69"
            },
            {
                "id": 49,
                "transcript": "you'll see that's what happened was kind of like the inversion of these two dimensions. So now I have the um the time dimension first, so the number of frames and then I have the frequency as the second dimension. And this is what we want to do on our power spectrogram.",
                "start_time": "877.539",
                "end_time": "893.63"
            },
            {
                "id": 50,
                "transcript": "So we'll do like this. A power spectrum is equal to power",
                "start_time": "894.44",
                "end_time": "901.739"
            },
            {
                "id": 51,
                "transcript": "spec",
                "start_time": "902.479",
                "end_time": "903.809"
            },
            {
                "id": 52,
                "transcript": "dot capital T. And so this way we just get the transfer of the power uh spectrum. OK? So now let's create a",
                "start_time": "904.78",
                "end_time": "915.69"
            },
            {
                "id": 53,
                "transcript": "variable like this. So an empty list like this and this is where we'll cash the band energy ratio for each frame. And remember the band energy ratio as as a feature is is a frame best frame based feature. So we're going to have a value",
                "start_time": "917.95",
                "end_time": "936.489"
            },
            {
                "id": 54,
                "transcript": "a band energy ratio for each frame. So and we'll be cashing it for each frame here like in this variable called band energy ratio here. OK. So we'll do now I will iterate through all the frames in the power spectrogram.",
                "start_time": "936.5",
                "end_time": "955.049"
            },
            {
                "id": 55,
                "transcript": "I'd say we'll do four frequencies",
                "start_time": "955.69",
                "end_time": "961.299"
            },
            {
                "id": 56,
                "transcript": "and frame",
                "start_time": "962.26",
                "end_time": "964.109"
            },
            {
                "id": 57,
                "transcript": "uh in power",
                "start_time": "966.63",
                "end_time": "969.52"
            },
            {
                "id": 58,
                "transcript": "spectrogram.",
                "start_time": "970.14",
                "end_time": "971.489"
            },
            {
                "id": 59,
                "transcript": "So what should we do here? Well, so here we are iterating through all the frames and getting like the the the the value like of the of the uh for each frequencies, right? Like uh for each frame. In other words, what we want to do here is calculate the band energy ratio for each",
                "start_time": "973.07",
                "end_time": "995.78"
            },
            {
                "id": 60,
                "transcript": "frame. So let me put a password time being. And so what should we do here? Well, it's quite straightforward. So what we want to uh calculate uh is like this two items. So the numerator and the denominator. So the numerator is basically the the sum of the power in the lower energies",
                "start_time": "996.5",
                "end_time": "1021.75"
            },
            {
                "id": 61,
                "transcript": "and the denominator corresponds to the sum of the power in the higher frequencies.",
                "start_time": "1022.169",
                "end_time": "1028.79"
            },
            {
                "id": 62,
                "transcript": "So",
                "start_time": "1029.77",
                "end_time": "1030.849"
            },
            {
                "id": 63,
                "transcript": "let's do that. So we'll do some power low uh frequencies frequencies. And how do we calculate this? Well, uh we can use NP dot Sun and then we'll pass in the frequencies infra",
                "start_time": "1031.708",
                "end_time": "1052.17"
            },
            {
                "id": 64,
                "transcript": "here.",
                "start_time": "1053.4",
                "end_time": "1054.459"
            },
            {
                "id": 65,
                "transcript": "But we want",
                "start_time": "1055.13",
                "end_time": "1056.869"
            },
            {
                "id": 66,
                "transcript": "some across all the values or across all the frequencies. But rather",
                "start_time": "1057.609",
                "end_time": "1063.119"
            },
            {
                "id": 67,
                "transcript": "just take the first uh frequency bins up to the split frequency",
                "start_time": "1064.51",
                "end_time": "1072.339"
            },
            {
                "id": 68,
                "transcript": "then. OK. So, and uh it's gonna be easy to do the same thing for the high frequency. But so let me just like rewrite this as high. So some power high frequencies and so here will sum the values uh uh all the, the, the values for the power at all the different frequency bins in the higher",
                "start_time": "1074.0",
                "end_time": "1097.91"
            },
            {
                "id": 69,
                "transcript": "um part of the spectrum. And so what this actually means is that we'll slice this starting from the split frequency bin and then go up to like the, the the last frequency bin, the highest frequency bin.",
                "start_time": "1098.18",
                "end_time": "1115.27"
            },
            {
                "id": 70,
                "transcript": "OK. So now with this, we have both of the elements. So the numerator and the denominator here in this um formula. So what remains to you to do is just like to divide this. OK. So we'll do that the uh band energy uh ratio uh current frame is equal to the sum power",
                "start_time": "1115.579",
                "end_time": "1142.729"
            },
            {
                "id": 71,
                "transcript": "of the uh low frequencies divided by the sum of the power for the high frequencies like this. OK. So",
                "start_time": "1143.099",
                "end_time": "1154.079"
            },
            {
                "id": 72,
                "transcript": "the next step here is to just uh append",
                "start_time": "1154.949",
                "end_time": "1160.089"
            },
            {
                "id": 73,
                "transcript": "the band energy ratio for the current frame to the band energy ratio. List here so that we can catch the value of the uh band uh energy ratio",
                "start_time": "1161.349",
                "end_time": "1173.949"
            },
            {
                "id": 74,
                "transcript": "uh for the current frame. So we'll do a band energy ratio dot uh append and we'll pass in the band energy ratio of the current frame like this. Ok? So now we are ready to return and I'll just cast this list to a NPI array. So I'll do an NPI dot array and we'll pass the band",
                "start_time": "1174.719",
                "end_time": "1201.569"
            },
            {
                "id": 75,
                "transcript": "energy ratio like this, ok? So now let's see if this works. So what I want to do is to get the band energy ratio for uh the BC. And so the way I'll do this is I'll call the calculator band energy ratio and I'll pass in the spectrogram and the spectrogram here is gonna be this, the PC spec",
                "start_time": "1202.28",
                "end_time": "1228.65"
            },
            {
                "id": 76,
                "transcript": "then I'll need to specify the split frequency. So the split frequency will be using 2000. That as I said is a totally fine uh split frequency. And then for the Sa Mle rate, we, if you remember guys like when we load it,",
                "start_time": "1230.839",
                "end_time": "1247.66"
            },
            {
                "id": 77,
                "transcript": "uh the waveform here, we got back like the simple rates that's defaulted to 22 2050. But I'll get like this sr",
                "start_time": "1248.39",
                "end_time": "1257.699"
            },
            {
                "id": 78,
                "transcript": "over here",
                "start_time": "1258.27",
                "end_time": "1259.319"
            },
            {
                "id": 79,
                "transcript": "like this,",
                "start_time": "1261.189",
                "end_time": "1262.13"
            },
            {
                "id": 80,
                "transcript": "ok? So now let's take a look at the band's energy ratio",
                "start_time": "1263.17",
                "end_time": "1269.369"
            },
            {
                "id": 81,
                "transcript": "um shape.",
                "start_time": "1270.109",
                "end_time": "1271.91"
            },
            {
                "id": 82,
                "transcript": "Let's take a look at this, ok? So this is a numpy array uh which only like one dimension and it has 1292 items in it. And is it correct? Well, it is correct because if you guys remember",
                "start_time": "1274.68",
                "end_time": "1293.239"
            },
            {
                "id": 83,
                "transcript": "here, like in the spectrogram, we had uh well, this is the transpo spectrogram. So here like in the first dimension, we have the, the, the time dimension which is equal to 1292 which is the same number for spent energy ratio array.",
                "start_time": "1293.25",
                "end_time": "1309.729"
            },
            {
                "id": 84,
                "transcript": "And that basically means that we're getting like values for all the uh different frames that we have in the spectrum, which is what we were looking for. Ok. So now let me do the same thing. So let me also get the band energy ratio for the red hot",
                "start_time": "1309.869",
                "end_time": "1328.349"
            },
            {
                "id": 85,
                "transcript": "chili pepper,",
                "start_time": "1328.859",
                "end_time": "1330.099"
            },
            {
                "id": 86,
                "transcript": "red hots",
                "start_time": "1330.65",
                "end_time": "1332.76"
            },
            {
                "id": 87,
                "transcript": "song. And so here obviously I need to pass the red hot spectrogram. OK? Good. OK. So the last thing that now remains to do is they actually visualize this uh bent energy ratio curves. And I also want to compare this two so that we can draw some conclusion about sp energy ratio curves in different genres like in this case,",
                "start_time": "1333.839",
                "end_time": "1358.949"
            },
            {
                "id": 88,
                "transcript": "music and classical music. OK. So now, first of all, let me add uh a few blocks like this and then I'll Yeah, well, not that I want the mark mark down and I'll say V URL",
                "start_time": "1358.959",
                "end_time": "1375.979"
            },
            {
                "id": 89,
                "transcript": "bands and A G ratio curves. First thing we wanna do is create a figure. So we'll do plot dot uh figure and I'll pass a fig",
                "start_time": "1377.01",
                "end_time": "1391.3"
            },
            {
                "id": 90,
                "transcript": "size and I'll set this to 25 by 10 like this. OK? So next we want to create a plot, so we'll do plot dot plot and here we should pass three things. So the value for the X axis, which is gonna be time for us and then the value for the Y axis, which is the actual",
                "start_time": "1391.959",
                "end_time": "1413.63"
            },
            {
                "id": 91,
                "transcript": "um band energy ratio array and then an optional color so that we can identify the two different curves for the BC uh stuff and for red hot chili pepper salt.",
                "start_time": "1413.81",
                "end_time": "1425.739"
            },
            {
                "id": 92,
                "transcript": "OK? So let's do the first thing. So we'll pass t now t doesn't exist yet. So, uh but for the time being, I'll put it there as a placeholder, then I'll pass the band energy ratio for the BC as the Y axis and then for uh the color outside blue for the BC. OK?",
                "start_time": "1426.01",
                "end_time": "1445.8"
            },
            {
                "id": 93,
                "transcript": "So we'll do the same thing for the uh red hot chili pepper song. So here I'll pass the relative uh band to energy ratio",
                "start_time": "1446.16",
                "end_time": "1456.219"
            },
            {
                "id": 94,
                "transcript": "uh array. And here we'll set this color equal to uh red. And finally, we'll do a plot dot show. Now, obviously, if I get on and press enter, I get uh an error because the T is not defined. We don't have a value for that. So I should implement that first thing I want to just like bring up one of these boxes here so that I can find T.",
                "start_time": "1456.52",
                "end_time": "1484.15"
            },
            {
                "id": 95,
                "transcript": "So 1st, 1st off, I need to define uh frames and this is gonna be equal to a range and I'll get the uh length of the say bear",
                "start_time": "1484.589",
                "end_time": "1498.819"
            },
            {
                "id": 96,
                "transcript": "the BC band energy ratio uh array for the BC. And the, the length is going to be equal for the BC and the red hot chili pepper. So I can use just one. OK. So here, now I have like this value for this variable frames and now I can move on and implement T and here what I can do is use uh Libres.",
                "start_time": "1499.38",
                "end_time": "1522.66"
            },
            {
                "id": 97,
                "transcript": "And uh here Libres has a nice utility function called frames to uh time. And what it it needs as arguments is the frames. And then I should",
                "start_time": "1522.979",
                "end_time": "1539.93"
            },
            {
                "id": 98,
                "transcript": "um specify the hop length and the hop length I think we specified up here as a constant called hop size, which is equal to 512. So totally uh yeah, traditional number for that. OK. So we'll do this. OK? And so here what it gets is basically like the, the value of time at each frame. So let, let me show you what I mean by that. So",
                "start_time": "1540.569",
                "end_time": "1567.609"
            },
            {
                "id": 99,
                "transcript": "uh here T",
                "start_time": "1568.17",
                "end_time": "1569.89"
            },
            {
                "id": 100,
                "transcript": "is an array and the uh length uh of T is equal to 1292. So these are all like the, the frames and for at each frame, uh we're just like converting uh from just like in to like the relative time given the hop length that we are using now that we have T we can move on and plot our band energy ratio for the two songs.",
                "start_time": "1570.88",
                "end_time": "1597.969"
            },
            {
                "id": 101,
                "transcript": "So, and as you can see in blue, we have the band energy ratio for the BC piece. And in red, we have the one for the red hot chili pepper song. And there's a stark difference between the two and basically the B energy ratio is way higher for the BC PS than the red hot chili peppers ones. And that's usually the case, it's something that you find uh quite often when you compare classical music",
                "start_time": "1598.81",
                "end_time": "1625.26"
            },
            {
                "id": 102,
                "transcript": "with rock music. And that's because in classical music, most of the energy is concentrated in the lower end of the spectrum. Whereas in rock music, you have a more balanced distribution and that's probably has to do with the fact that there are a lot of like noisy uh sounds like snares or like stuff like this that just like provides energy or offers energy in the higher end of the spectrum in rock music.",
                "start_time": "1625.27",
                "end_time": "1651.729"
            },
            {
                "id": 103,
                "transcript": "OK. So uh by now, you should be able to have, well, you should have like a very deep understanding of band energy ratio, how to calculate it from scratch with Python. And you probably also have an idea of how bent energy ratio like works in different genres, which is great. So that's all really for today. So next time we'll be uh looking into the remaining two frequency to all your features and how to like implement,",
                "start_time": "1651.9",
                "end_time": "1680.344"
            },
            {
                "id": 104,
                "transcript": "but we won't implement them from scratch, but rather we'll be using uh Li Breza for uh implementing them. So if you've enjoyed the video, please leave a like if you haven't subscribed and want more content like this, please uh subscribe to the channel and I guess I'll see you next time. Cheers.",
                "start_time": "1680.354",
                "end_time": "1698.55"
            }
        ]
    }
}